# serverless.yml

service: serverless-spades

plugins: 
 - serverless-domain-manager

custom:
  customDomain:
    domainName: api-dev.bmclive.app
    stage: ${self:provider.stage}
    certificateName: bmclive.app
    createRoute53Record: true

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: "*"

resources: # CloudFormation template syntax from here on.
  Resources:
    usersTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: app_users
          AttributeDefinitions:
            - AttributeName: username
              AttributeType: S
            - AttributeName: email
              AttributeType: S
          KeySchema:
            - AttributeName: username
              KeyType: HASH
          BillingMode: PAY_PER_REQUEST
          GlobalSecondaryIndexes:
            - IndexName: email-index
              KeySchema:
                - AttributeName: email
                  KeyType: HASH
              Projection:
                NonKeyAttributes:
                  - id
                  - username
                  - password
                  - roles
                ProjectionType: INCLUDE
                
functions:
  app:
    handler: app.server # reference the file and exported method
    environment:
      JWT_SIGNING_SECRET: bmcsupersecretkey
    events: # events trigger lambda functions
      - http: # this is an API Gateway HTTP event trigger
          path: /
          method: ANY
          cors: true
      - http: # this is an API Gateway HTTP event trigger
          path: /test/all
          method: ANY
          cors: true
      - http: # this is an API Gateway HTTP event trigger
          path: /test/user
          method: get
          cors: true
      - http: # this is an API Gateway HTTP event trigger
          path: /test/admin
          method: ANY
          cors: true
      - http: # this is an API Gateway HTTP event trigger
          path: /auth/signup
          method: post
          cors: true
      - http: # this is an API Gateway HTTP event trigger
          path: /auth/signin
          method: post
          cors: true
      # - http: # spades /spades/new
      #     path: /spades/new
      #     method: get
      #     cors: true
      - http: # all routes get proxied to the Express router deck/<<deck_id>>/pile/<<pile_name>>/list/ 
          path: /{proxy+}
          method: ANY
          cors: true
